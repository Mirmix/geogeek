{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Warning</p> <p>This website is really alpha and a work-in-progress. We hope to fill it in the coming months.</p>"},{"location":"#list-of-topics","title":"List of topics","text":"<p>https://github.com/tudelft3d/geogeek/issues/</p>"},{"location":"#how-to-fix-errors-and-contribute","title":"How to fix errors and contribute?","text":"<ol> <li>Click on the 'Edit this page' </li> <li>You have to login to GitHub</li> <li>Modify the Markdown text</li> <li>Create a pull request</li> </ol>"},{"location":"basics/filesystem/","title":"The file system","text":""},{"location":"c%2B%2B/cmake/","title":"All platforms: CLion and CMake","text":"<ol> <li> <p>In CLion, create a new project (File &gt; New Project) or click on New Project on the Welcome screen.</p> </li> <li> <p>Set the language to C++ and the type as executable. </p> </li> <li> <p>Select the root folder location (where you want to store the project) and select the language standard. For the latter, note that CGAL requires C++14 or higher.</p> </li> </ol> <p>These steps will create a new CMake-based project in CLion, which will include a minimal <code>main.cpp</code> file for your code and a <code>CMakeLists.txt</code> for the compilation/linking instructions.</p>"},{"location":"c%2B%2B/cmake/#making-sense-of-your-cmakeliststxt-file","title":"Making sense of your CMakeLists.txt file","text":"<p>The <code>CMakeLists.txt</code> file that was created by CLion contains four commands:</p> <ol> <li> <p><code>cmake_minimum_required</code>, which specifies the minimum required CMake version to compile your project;</p> </li> <li> <p><code>project</code>, which specifies the name of your project;</p> </li> <li> <p><code>set</code>, which sets a variable called <code>CMAKE_CXX_STANDARD</code> to whatever C++ version you specified as the minimum for your project;</p> </li> <li> <p><code>add_executable</code>, which creates a new compilation target with the same name as your project and adds the <code>main.cpp</code> so that it's compiled</p> </li> </ol>"},{"location":"c%2B%2B/cmake/#modifying-your-cmakeliststxt-file-to-add-external-libraries","title":"Modifying your CMakeLists.txt file to add external libraries","text":"<p>Anything in the C++ standard library should work after merely including a header in your <code>main.cpp</code>. No changes to the <code>CMakeLists.txt</code> required. For example, if you want to use <code>std::cout</code> and its <code>&lt;&lt;</code> operator, you just need include <code>iostream</code> in the <code>main.cpp</code>:</p> <pre><code>#include &lt;iostream&gt; \n</code></pre> <p>However, if you need to use an external library (eg CGAL or GDAL), you will first need to add some commands to your <code>CMakeLists.txt</code> for compilation and linking. Every library is different, but the process usually starts by calling a script that finds the library. An example using CGAL:</p> <pre><code>find_package( CGAL REQUIRED )\n</code></pre> <p>The <code>REQUIRED</code> keyword is optional, but it makes CMake generate an error if CGAL is not found. Here's another example asking for GDAL version 3.0 and higher:</p> <pre><code>find_package( GDAL 3.0 )\n</code></pre> <p>These <code>find_package</code> commands set a number of variables with the required paths and also set some compilation targets. For a lot of libraries, this command is followed by the <code>include_directories</code>, which tells CMake to consider the folders where the library's header files (<code>.h</code> or <code>.hpp</code>) are stored. For example, with GDAL it is:</p> <pre><code>include_directories( ${GDAL_INCLUDE_DIR} )\n</code></pre> <p>There, <code>GDAL_INCLUDE_DIR</code> is a variable that was set by <code>find_package</code>. Finally, for most libraries, linking to them is also necessary. An example with GDAL:</p> <pre><code>target_link_libraries(PROJECT_NAME ${GDAL_LIBRARY} )\n</code></pre> <p>Where <code>GDAL_LIBRARY</code> is also a variable that was set by <code>find_package</code>. CGAL is a bit different, since <code>find_package(CGAL)</code> actually sets a target <code>CGAL::CGAL</code> that you should link to. Because of that, you should use something like this:</p> <pre><code>target_link_libraries(PROJECT_NAME CGAL::CGAL)\n</code></pre>"},{"location":"c%2B%2B/cmake/#cmake-and-vcpkg","title":"CMake and vcpkg","text":"<p>If you use <code>vcpkg</code>, you probably want to use Visual Studio or the Visual Studio toolchain in CLion.</p> <p>However, if for some reason you prefer to use CMake, note that the libraries installed using <code>vcpkg</code> are installed in the Windows filesystem, not the Linux one of WSL. Therefore, CMake can have trouble finding them.</p> <p>For some libraries, like CGAL, you can modify the <code>find_package</code> command to give it a hint of a path to search for:</p> <pre><code>find_package(CGAL PATHS \"C:/Program Files (x86)/CGAL\")\n</code></pre> <p>For some other libraries, like Boost, you'll have to set the required variables manually:</p> <pre><code>set(BOOST_ROOT \"C:/dev/boost\")\n</code></pre>"},{"location":"c%2B%2B/cmake/#a-sample-cmake-file-for-cgal","title":"A sample CMake file for CGAL","text":"<pre><code>cmake_minimum_required(VERSION 3.1)\nproject(PROJECT_NAME)\nset(CMAKE_CXX_STANDARD 14)\nfind_package(CGAL)\nadd_executable(PROJECT_NAME main.cpp)\ntarget_link_libraries(PROJECT_NAME CGAL::CGAL)\n</code></pre>"},{"location":"c%2B%2B/vcpkgwindows/","title":"Windows: vcpkg with Visual Studio &amp; CLion","text":""},{"location":"c%2B%2B/vcpkgwindows/#why-an-alternative-solution","title":"Why an alternative solution?","text":"<p>Using thrid-party libraries can sometimes not be very straightforward on Windows, actually using WSL on Windows is indeed a convenient way.  However, there are some disadvantages:</p> <ul> <li> <p>WSL will incrementally occupy system disk space.</p> <p>WSL is installed on C drive by default, there are quite a lot blogs on the internet to show how to move your WSL to another drive, but usually it is not recommended to avoid possible issues.</p> </li> <li> <p>running project in WSL can be slow</p> <p>It depends on the situation, but practically speaking, the more you use WSL, the slower the compilation speed and the running speed may be as the size of the occupied space increases.</p> <p>Another concern is about gcc/g++ compiler, in some situations, it compiles slower than MSVC(cl.exe) on windows(for example in our practice MSVC compiles CGAL faster)</p> </li> <li> <p>separately isolated file system</p> <p>The file system of WSL is separated from windows, which means only if you have opened WSL from windows, the files in it can be accessed. This is sometimes not convenient.</p> </li> </ul>"},{"location":"c%2B%2B/vcpkgwindows/#using-vcpkg-and-visual-studio-on-windows","title":"Using vcpkg and visual studio on windows","text":"<p>What is vcpkg? To be in short, vcpkg is a free C/C++ package manager for acquiring and managing libraries. Maintained by the Microsoft C++ team and open source contributors.</p>"},{"location":"c%2B%2B/vcpkgwindows/#install-vcpkg","title":"install vcpkg","text":""},{"location":"c%2B%2B/vcpkgwindows/#step-1-clone-the-vcpkg-repo","title":"Step 1: Clone the vcpkg repo","text":"<p><pre><code>git clone https://github.com/Microsoft/vcpkg.git\n</code></pre> Make sure you are in the directory you want the tool installed to before doing this.</p>"},{"location":"c%2B%2B/vcpkgwindows/#step-2-run-the-bootstrap-script-to-build-vcpkg","title":"Step 2: Run the bootstrap script to build vcpkg","text":"<pre><code>.\\vcpkg\\bootstrap-vcpkg.bat\n</code></pre>"},{"location":"c%2B%2B/vcpkgwindows/#step-3-install-libraries-for-your-project","title":"Step 3: Install libraries for your project","text":"<pre><code>vcpkg install [packages to install]\n</code></pre>"},{"location":"c%2B%2B/vcpkgwindows/#step-4-using-vcpkg-with-msbuild-visual-studio-may-require-elevation","title":"Step 4: Using vcpkg with MSBuild / Visual Studio (may require elevation)","text":"<p><pre><code>vcpkg integrate install\n</code></pre> Note: Step 4 is not necessary if you are using CLion.</p> <p>After this, you can create a new project or open an existing one in the IDE. All installed libraries should already be discoverable by IntelliSense and usable in code without additional configuration.</p> <p>For more detailed info, you can refer to vcpkg - get started</p>"},{"location":"c%2B%2B/vcpkgwindows/#install-cgal","title":"install CGAL","text":"<pre><code>vcpkg install cgal\n</code></pre> <p>if you want to specify 64bit version:</p> <pre><code>vcpkg install cgal:x64-windows\n</code></pre>"},{"location":"c%2B%2B/vcpkgwindows/#install-gdal","title":"install GDAL","text":"<pre><code>vcpkg install GDAL\n</code></pre> <p>Notes:</p> <p>It would be more convenient if you use Windows Powershell. In Powershell, you can install libraries via:</p> <pre><code>PS path\\to\\vcpkg&gt; .\\vcpkg install [package name]\n</code></pre> <p>All in all, using WSL can make you familiar with the linux environment in advance - if you will use linux for development in the future. While if you are using windows platform (as far as I know most of first year students are using it since the Geomatics suggests so), it might be a good idea to use vcpkg and MSVC. </p> <p>And with regard to vcpkg, there is one very comprehensive video:</p> <p>install vcpkg step by step</p> <p>It explains how you download and build vcpkg and use it step by step.</p>"},{"location":"c%2B%2B/vcpkgwindows/#using-vcpkg-with-visual-studio","title":"Using vcpkg with Visual Studio","text":"<p>Since we've integrated vcpkg with MSBuild / Visual Studio, you need to do nothing if you are using Visual Studio C++ project. In your header / source files, you can for example just type: <pre><code>#include &lt;CGAL/Polyhedron_3.h&gt;\n</code></pre> and the header file should be automatically detected and included.</p> <p>if you are using CMake project, you need to add corresponding scripts in your CMakeLists.txt file, for example, if you want to include CGAL: <pre><code>find_package(CGAL)\nif (CGAL_FOUND)\ninclude(${CGAL_USE_FILE})\nmessage(STATUS \"CGAL found\")\nmessage(STATUS \"CGAL VERSION\" \" \" ${CGAL_VERSION})\nelse()\nmessage(SEND_ERROR \"this code requires the CGAL library\")\nreturn()\nendif()\n</code></pre></p>"},{"location":"c%2B%2B/vcpkgwindows/#using-vcpkg-with-clion","title":"Using vcpkg with CLion","text":"<p>(1) configure C++ tool chain: File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Toolchains </p> <p>see here for more details.</p> <p>Note: About selecting architecture:</p> <ul> <li> <p>x86: The compiler is the x86 version and the output target is x86.</p> </li> <li> <p>amd64_x86: The compiler is the amd64 version and the output target is x86.</p> </li> <li> <p>amd64: The compiler is the amd64 version and the output target is amd64.</p> </li> <li> <p>x86_amd64: The compiler is the x86 version and the output file is amd64.</p> </li> </ul> <p>(2) configure CMake option: File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; CMake <pre><code>DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/scripts/buildsystems/vcpkg.cmake\n</code></pre> </p> <p>Now you are all set to include your desired library in CMakeLists.txt, for example include CGAL:</p> <p></p>"},{"location":"c%2B%2B/wslclion/","title":"Windows: WSL &amp; CLion","text":"<p>By far the simplest way to use in C++ libraries such as CGAL (library to perform geometric operations in 2D, 3D, and even nD), GDAL (library to read/write all the vector/raster formats in GIS), or others (eg GEOS), under Windows is... to install Linux!?</p> <p>Installing all the libraries above is possible directly under Windows, but it is often a massive pain, so we recommend you use WSL--Windows Subsystem for Linux, that is you install a Linux environment \"inside\" your Windows (Win10 or Win11), and use this.</p> <p>Before you continue this tutorial</p> <p>You must first install WSL on your Windows machine.</p>"},{"location":"c%2B%2B/wslclion/#install-gdal","title":"Install GDAL","text":"<p>To install GDAL, run the following commands one by one on your Ubuntu terminal:</p> <pre><code>sudo add-apt-repository ppa:ubuntugis/ppa &amp;&amp; sudo apt-get update\n</code></pre> <pre><code>sudo apt-get update\n</code></pre> <pre><code>sudo apt-get install gdal-bin\n</code></pre> <pre><code>sudo apt-get install libgdal-dev\n</code></pre> <p>If everything went correct, you've successfully installed GDAL!  </p>"},{"location":"c%2B%2B/wslclion/#install-cgal","title":"Install CGAL","text":"<p>Let's install CGAL now with the following two commands:</p> <pre><code>sudo apt-get update\n</code></pre> <p></p> <pre><code>sudo apt-get install libcgal-dev\n</code></pre> <p></p> <p>If everything went correct, you now have CGAL as well!  </p> <p>Note</p> <p>Before starting to use GDAL and CGAL on CLion, you will need to complete the following two steps. </p>"},{"location":"c%2B%2B/wslclion/#install-cmake","title":"Install CMake","text":"<p>To install CMake, run the following commands on your Ubuntu terminal. </p> <p>Install the libraries that CMake depends on:</p> <pre><code>sudo apt-get install build-essential libssl-dev\n</code></pre> <p>Go to the tmp directory:</p> <pre><code>cd /tmp\n</code></pre> <p>Download the source code:</p> <pre><code>wget https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0.tar.gz\n</code></pre> <p>When this is complete, extract the file:</p> <pre><code>tar -zxvf cmake-3.20.0.tar.gz\n</code></pre> <p>Go to the extracted folder:</p> <pre><code>cd cmake-3.20.0\n</code></pre> <p>Compile and install CMake:</p> <pre><code>./bootstrap\n</code></pre> <p>This may take some time, you should see the following when it is finished. </p> <p></p> <p>Now run the following command to make it:</p> <pre><code>make\n</code></pre> <p>This step will also take some time. Once it is finished, you can finally install it:</p> <pre><code>sudo make install\n</code></pre> <p>Finally, to check if the installation was successful, you can see the CMake version:</p> <pre><code>cmake --version\n</code></pre> <p></p>"},{"location":"c%2B%2B/wslclion/#install-gdb","title":"Install GDB","text":"<p>GDB is a debugger for C++ and you will need it in CLion to connect to WSL. </p> <p>If you are installing GDB right after CMake, you are probably still in the <code>cmake-3.20.0</code> folder on your Ubuntu terminal. First, go back to the home directory:</p> <pre><code>cd ../..\n</code></pre> <p></p> <p>Install GDB with the following two commands:</p> <pre><code>sudo apt-get update\n</code></pre> <pre><code>sudo apt-get install gdb\n</code></pre> <p>If this method does not work for you, you can also install it through the source code as explained in the second option on this [page]. </p> <p>You can verify the installation by checking the GDB version:</p> <pre><code>gdb --version\n</code></pre> <p></p> <p>Once you install GDB, you now have everything you need to connect to WSL in CLion!</p>"},{"location":"c%2B%2B/wslclion/#connect-to-clion","title":"Connect to CLion","text":"<p>Warning</p> <p>The steps to connect with WSL may change depending on your CLion version. This tutorial uses CLion 2021.3.</p> <p>Go to Settings from File or by simply pressing Ctrl+Alt+S. </p> <p></p> <p>Under Build, Execution, Deployment, go to Toolchains. Then, add a new toolchain by clicking on the + sign and select WSL. </p> <p></p> <p>It should automatically detect all the fiels (Toolset, CMake, Debugger etc.). However, if you see an error for CMake that it cannot be found, click on Browse on the right-side of CMake and choose the correct file. You can find it under <code>/usr/local/bin/cmake</code>.</p> <p></p> <p>After this step, you may see the following warning under C++ compiler: Test cmake run finished with errors. In this case, reboot your WSL by typing the following command on your Ubuntu terminal:  </p> <pre><code>wsl.exe -t Ubuntu\n</code></pre> <p>This will close the terminal. Simply open it again by searching Ubuntu on your device. Now, if you check CLion again, you should not see the warning anymore. </p> <p>Finally, do not forget to make WSL default by placing it on the top of the listed toolchains. You can do this by dragging WSL to the top, or by using the arrows. </p> <p></p> <p>Success</p> <p>Yay, you can now use GDAL and CGAL on Windows with CLion!</p>"},{"location":"c%2B%2B/xcode/","title":"Mac: Homebrew and Xcode","text":""},{"location":"c%2B%2B/xcode/#why-an-alternative-solution","title":"Why an alternative solution?","text":"<p>CLion works fine on Mac. However, there are some disadvantages:</p> <ul> <li> <p>CLion is not free in all conditions.</p> <p>CLion is free for students and teachers, as well as for open source projects. Xcode is free for all users and all projects.</p> </li> <li> <p>CLion is slow</p> <p>Compiling with CMake is significantly slower than compiling with Xcode, even when both are set to use <code>clang</code> as the compiler.</p> <p>If CLion is set to use gcc/g++, the performance difference is much bigger and the error messages are much less helpful.</p> </li> </ul>"},{"location":"c%2B%2B/xcode/#homebrew","title":"Homebrew","text":"<p>The easiest way to install external libraries on Mac is to use Homebrew (recommended), although it's quite easy to use an alternative like MacPorts or to install them manually (follow the Linux or Unix instructions if there are none for Mac).</p> <p>An example to install CGAL with Homebrew:</p> <pre><code>brew install cgal\n</code></pre> <p>Another example with GDAL:</p> <pre><code>brew install gdal\n</code></pre> <p>If you're using an Apple Silicon (arm64) Mac, the paths used by Homebrew are: <code>/opt/homebrew/include</code> (for headers) and <code>/opt/homebrew/lib</code> (for libraries).</p> <p>If you're using an Intel (x86-64) Mac, the paths used by Homebrew are: <code>/usr/local/include</code> (for headers) and <code>/usr/local/lib</code> (for libraries).</p>"},{"location":"c%2B%2B/xcode/#xcode","title":"Xcode","text":"<p>Xcode is Apple's integrated development environment (IDE) for macOS and is the most common tool that is used to develop Mac applications. Xcode and CGAL work great together as long as you don\u2019t use the Xcode projects generated by CMake and instead create your own.</p> <p>First, start by creating a new project (File &gt; New &gt; Project, or select \"Create a new Xcode project\" from the welcome window). Depending on what you plan to do, it can be any kind of project, but for simple things a Command Line Tool works, which is found in the macOS tab under Application. If you want something with a native Mac GUI, you probably should go for an App.</p> <p>Once you\u2019ve given your project a name, make sure that the language is set to C++ and click Next. Then decide where to save it, select if you want to create a local Git repository for it and you\u2019re done. You\u2019re then confronted with the main Xcode window.</p> <p>In short, Xcode works on the basis of projects and targets, just like CLion with CMake. Without going into much detail, the project contains all your stuff and a target has the aim to create a given executable (or library, plug-in, etc.) based on some of the files in the project. A project can have many targets, like a codebase that produces two applications (eg macOS and iOS). Some of the settings at the project level cascade down to its targets, but I would recommend you to modify things directly at the target level.</p> <p>So after you select the project (blueprint icon with three sticks that look like an A), select the target (black Terminal-looking icon). There, on the Build Settings tab, you will find a lot of options in several categories. Select the All and Combined tabs.</p> <p>Many of these options don\u2019t matter too much, but a few can thoroughly mess with your target, so unless you know what something means, leave the options with their defaults. However, there are a few that you will likely need to modify:</p> <ul> <li>Search Paths &gt; Framework Search Paths: If you\u2019ve installed some dynamic libraries in the form of Mac Frameworks (rather than Mach-O .dylibs, you might want to add /Library/Frameworks here.</li> <li>Search Paths &gt; Header Search Paths: In most cases, you should add <code>/opt/homebrew/include</code> (Apple Silicon) or <code>/usr/local/include</code> (Intel) here.</li> <li>Search Paths &gt; Library Search Paths: In most cases, you should add <code>/opt/homebrew/lib</code> (Apple Silicon) or <code>/usr/local/lib</code> (Intel) here.</li> <li>Apple Clang - Code Generation &gt; Optimization Level &gt; Debug: If you're having performance issues with CGAL, you can increase the optimisation level here to -O1 or -O2 here. However, this will cause make the Xcode debugger less useful.</li> <li>Apple Clang - Language &gt; C Language Dialect: For better cross-platform code, you should select c11 rather than gnu11 here.</li> <li>Apple Clang - Language - C++ &gt; C++ Language Dialect: Here you should really choose wisely depending on your code and the packages that you're using. The safest bet for old code is probably GNU++98, but many new-ish packages will only work with C++11, C++14, or even C++17 (or the GNU variants). In order to future-proof your code, you should probably select C++17 or even C++20 as much as possible. I personally think it\u2019s nicer to avoid the GCC compliant GNU++ varieties, since these might have issues with other compilers.</li> </ul> <p>Next, go to the Build Phases tab of the same target. Here, you should add all the dynamic libraries that your code will need to link to. So, open the Link Binary With Libraries collapsible menu and click the + sign below.</p> <p>You\u2019ll get a cascading sheet containing all the standard Mac OS X Frameworks as contained in /System/Library/Frameworks. You\u2019ll also get all the dynamic libraries contained in /usr/lib. However, CGAL and its dependencies will not be there.</p> <p>So, instead click on the Add Other\u2026 dropdown and Add Files\u2026, after which you\u2019ll get a standard Finder Open window. Since the libraries you installed are in /usr/local/lib by default and that directory is by default hidden, just type shift+command+g (\u21e7\u2318G) to Go to a folder and type /usr/local/lib. There\u2019s autocomplete.</p> <p>In there, you should select all the libraries that your CGAL packages need. Repeat this process a few times or select all the ones you need at the same time using the \u2318 key. For the basic stuff, these would be:</p> <p>libboost_system.dylib or libboost_system-mt.dylib libboost_thread.dylib or libboost_thread-mt.dylib libCGAL_Core.dylib libCGAL.dylib libgmp.dylib libmpfr.dylib</p> <p>You might notice that these are actually symlinks to the actual files. Unfortunately, Xcode will make your code point to the actual files instead. This means that when you update your dependencies, your Xcode project will not build anymore. Just check which linked libraries are broken (they will be highlighted in red) and re-add them.</p>"},{"location":"git/gitintro/","title":"Intro to Git","text":"<p>Tip</p> <p>Introduction to git material should get your started with git.</p>"},{"location":"git/gitintro/#git-github-or-gitlab","title":"Git, GitHub, or GitLab?","text":"<p>The TUDelft has its own Git server (a GitLab server), staff can create repositories, but at the moment students cannot . Also, the repositories, even if created by staff, are not open to the outside world and thus we do not recommend using TUDelft's GitLab.</p> <p>GitHub is free to use for personal use, even for private repository. This is the preferred option.</p>"},{"location":"git/goodgit/","title":"A good Git repository","text":"<p>Note</p> <p>This list is inspired by the JOSS review criteria and by the Data Carpentry project's reproducibility.</p>"},{"location":"git/goodgit/#general","title":"General","text":"<ul> <li> the repository should be publicly available</li> </ul>"},{"location":"git/goodgit/#documentation","title":"Documentation","text":"<ul> <li> <p> there should be a README file that indicates </p> </li> <li> <p> the purpose of the project, what the code is for,</p> </li> <li> installation instructions</li> <li> example usage</li> <li> <p> aPI documentation (if this applies)</p> </li> <li> <p> the README should be a text file (and not a binary file like Word)</p> </li> <li> there should be a LICENSE file. Help with choosing a license.</li> <li> there should be a CITATION file that tells users how to site the project, data, and code</li> <li> a <code>changelog.md</code> detailing the changes between the releases should be available (help with changelog)</li> <li> there should be clear guidelines for third-parties wishing to: (1) contribute to the software; (2) report issues or problems with the software; (3) seek support</li> </ul>"},{"location":"git/goodgit/#organization","title":"Organization","text":"<ul> <li> folders should be used to separate data, code, documentation, and results</li> <li> the files should use a consistent naming scheme that indicates what they contain</li> </ul>"},{"location":"git/goodgit/#software","title":"Software","text":"<ul> <li> there should be releases to package the software (how to create a release)</li> <li> is a container available to run the proiect (eg Docker)?</li> <li> are unit tests available for the code?</li> </ul>"},{"location":"git/goodgit/#data","title":"Data","text":"<ul> <li> if you project has data: are they included or a link is provided?</li> <li> ff data is not included, is this because it is not necessary or generated as part of the project?</li> <li> are your raw data (if any) and processed data files separated?</li> </ul>"},{"location":"git/goodgit/#others","title":"Others","text":"<ul> <li> the code should be well documented</li> <li> Does the repository make use of continuous integration tools to insure internal reproduciblity?</li> </ul>"},{"location":"linux/delftblue/","title":"Using the DelftBlue supercomputer","text":"<p>Note</p> <p>DelftBlue is a high-performance computing cluster that is used for research and education at TU Delft. It is a heterogeneous cluster that consists of a mix of CPU and GPU nodes. It has a good official documentation.</p> <p>If you are supervisor having a student need to use DHPC, or aforementioned student you can request a project for your student. The request form is here and must be filled by the student.</p> <p>Note</p> <p>This is taken from from the blog of Nail Ibrahimli. This is a great general explanation of everything a geomatics student would need to know to use DelftBlue.</p>"},{"location":"linux/delftblue/#introduction","title":"Introduction","text":"<p>I am not an expert in using SLURM and using HPCs, but I have used it for a while now, and I have found it to be a very useful tool for managing HPC jobs. In this post, I will provide a brief introduction to SLURM, DelftBlue and INSY, and I will provide some basic information on how to use SLURM to manage HPC jobs on DelftBlue and INSY clusters.</p> <p>I have noticed that some students \u2014 particularly those with little to no technical background \u2014 are having difficulty using SLURM to manage HPC workloads on the DelftBlue and INSY clusters. This observation was the impetus for this post. I wanted to write a brief tutorial for those students that would cover all the essential information in one location.  This post aims to assist you in getting started with SLURM and HPC tasks on the DelftBlue and INSY clusters. Examples provided here are mainly for GPU-based jobs, but similar principles apply to CPU-based jobs as well.</p> <p>But I would strongly suggest to read the official documentation of DelftBlue and INSY, as it is very well written and has a lot of useful information.</p>"},{"location":"linux/delftblue/#slurm","title":"SLURM","text":"<p>SLURM (Simple Linux Utility for Resource Management) is a powerful open-source cluster management and job scheduling system that is widely used in High Performance Computing (HPC) environments. It is designed to be highly scalable, fault-tolerant, and easy to use.</p> <p>To submit a GPU job to the SLURM scheduler, you will need to use the <code>sbatch</code> command. The <code>sbatch</code> command allows you to submit a batch script to the scheduler, which will then execute the script on the appropriate resources. Here is an example of a simple SLURM batch script that requests one GPU and runs a command:</p> <pre><code>#!/bin/bash\n#SBATCH --gres=gpu:1\n#SBATCH --nodes=1\n#SBATCH --time=00:10:00\n# Execute the command\n./your_command\n</code></pre> <p>In this example, the <code>#SBATCH</code> command requests one GPU, one node and it will run for 10 minutes. You can edit the script and include your commands for the job.</p> <p>To submit the job, use the <code>sbatch</code> command followed by the name of the batch script file: <pre><code>sbatch my_job.sh\n</code></pre> Once the job is submitted, you can use the <code>squeue</code> command to view the status of your job. This command will display information about the job such as the job ID, the user who submitted the job, the status of the job, and more.</p> <pre><code>squeue -u &lt;username&gt;\n</code></pre> <p>To cancel a job, you can use the <code>scancel</code> command followed by the job ID. <pre><code>scancel &lt;job_id&gt;\n</code></pre> After your job is completed, you can use the <code>sacct</code> command to view accounting information about your job, including the resources it consumed and the exit status of the job.</p> <p>These are the basic steps for using SLURM to manage GPU-based HPC jobs. Be sure to consult the SLURM documentation for more information on how to use the system, including advanced configuration options and troubleshooting tips.</p>"},{"location":"linux/delftblue/#connecting-to-delftblue","title":"Connecting to DelftBlue","text":"<p>I feel lazy to learn to use GUI based softwares, so I  use terminal, and give command examples </p> <p>To connect to DelftBlue, you will need to use SSH. The login node is <code>login.delftblue.tudelft.nl</code>. You can connect to the login node using the following command:</p> <pre><code>ssh &lt;netid&gt;@login.delftblue.tudelft.nl\n</code></pre>"},{"location":"linux/delftblue/#data-transfer","title":"Data transfer","text":"<ul> <li>SCP (Secure Copy) Common choice      Using the <code>scp</code> command, you can copy files to and from DelftBlue. Here are some examples of using the scp command:     <pre><code>scp &lt;source&gt; &lt;target&gt;\n# Copying files from local machine to DelftBlue\nscp &lt;source&gt; &lt;netid&gt;@login.delftblue.tudelft.nl:&lt;target&gt;\n# Copying files from local machine to DelftBlue recursively\nscp -r &lt;source&gt; &lt;netid&gt;@login.delftblue.tudelft.nl:&lt;target&gt;\n# Copying files from DelftBlue to local machine\nscp &lt;netid&gt;@login.delftblue.tudelft.nl:&lt;source&gt; &lt;target&gt;\n# Copying files from DelftBlue to local machine recursively\nscp -r &lt;netid&gt;@login.delftblue.tudelft.nl:&lt;source&gt; &lt;target&gt;\n</code></pre></li> <li>SFTP (Secure File Transfer Protocol) Personal favourite      Using the <code>sftp</code> command, you can transfer files to and from DelftBlue. Here are some examples of using the <code>sftp</code> command:     <pre><code>sftp &lt;netid&gt;@login.delftblue.tudelft.nl\n# Changing directory in DelftBlue\ncd &lt;directory&gt;\n# Creating directory in local machine\nlcd &lt;directory&gt;\n# Listing files in DelftBlue\nls\n# Listing files in local machine\nlls # Just add an 'l' to the beginning of the command to perform the same operation on the local machine\n# Copying files from local machine to DelftBlue\nput &lt;source&gt; &lt;target&gt;\n# Copying files from local machine to DelftBlue recursively\nput -r &lt;source&gt; &lt;target&gt;\n# Copying files from DelftBlue to local machine\nget &lt;source&gt; &lt;target&gt;\n# Copying files from DelftBlue to local machine recursively\nget -r &lt;source&gt; &lt;target&gt;\n</code></pre></li> </ul>"},{"location":"linux/delftblue/#loading-modules","title":"Loading modules","text":""},{"location":"linux/delftblue/#what-are-modules","title":"What are modules?","text":"<p>Modules are a way to manage software on a cluster. They allow you to load and unload software packages, and they allow you to manage dependencies between software packages. Modules are loaded using the <code>module</code> command. Here are some examples of using the <code>module</code> command: <pre><code># Loading a module\nmodule load &lt;module_name&gt;\n# Unloading a module\nmodule unload &lt;module_name&gt;\n# Listing loaded modules\nmodule list\n# Listing available modules\nmodule avail\n</code></pre></p>"},{"location":"linux/delftblue/#what-modules-are-available","title":"What modules are available?","text":"<p>The modules available on DelftBlue are listed in the modules page. Use <code>spider</code> command to search for modules <pre><code>module spider &lt;module_name&gt;\n</code></pre></p>"},{"location":"linux/delftblue/#i-am-fully-lost-how-do-i-know-which-modules-i-need","title":"I am fully lost. How do I know which modules I need?","text":"<p>You can use the following command if you are not knowing what you are doing,  <pre><code>module load 2022r2     # load the default DelftBlue software stack\nmodule load cuda/11.6  # or cuda you need\nmodule load miniconda3 # loading the conda\n</code></pre> Checking the cuda version installed <pre><code>[&lt;netid&gt;@login04 ~]$ nvcc -V\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Tue_Mar__8_18:18:20_PST_2022\nCuda compilation tools, release 11.6, V11.6.124\nBuild cuda_11.6.r11.6/compiler.31057947_0\n</code></pre></p>"},{"location":"linux/delftblue/#conda-environment","title":"Conda environment","text":""},{"location":"linux/delftblue/#what-is-conda","title":"What is conda?","text":"<p>Conda is an open-source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs, and updates packages and their dependencies. Conda easily creates, saves, loads, and switches between environments on your local computer. It is mainly used for Python programs.</p>"},{"location":"linux/delftblue/#how-to-use-conda","title":"How to use conda?","text":"<p>To use conda, you will need to load the conda module. Here are some examples of using the <code>conda</code> command: <pre><code># Loading the conda module\nmodule load miniconda3\n# Creating a conda environment\nconda create -n &lt;environment_name&gt; &lt;package_name&gt;\n# Activating a conda environment\nconda activate &lt;environment_name&gt;\n# Deactivating a conda environment\nconda deactivate\n# Listing conda environments\nconda env list\n# Listing packages in a conda environment\nconda list\n# Installing a package in a conda environment\nconda install &lt;package_name&gt; -c &lt;channel_name&gt;\n# Removing a package from a conda environment\nconda remove &lt;package_name&gt;\n# Removing a conda environment\nconda env remove -n &lt;environment_name&gt; --all\n</code></pre></p>"},{"location":"linux/delftblue/#should-i-use-conda-environment-on-delftblue-avoiding-storage-issues","title":"Should I use conda environment on DelftBlue? Avoiding storage issues","text":"<p>Yes, you should use conda environment on DelftBlue. Is that I all need to do? No, the reason is that conda environments are stored in your home directory, and not in the shared file system. This means that you will not run into storage issues when using conda environments. And it will happen very quickly, believe me.</p> <p>To avoid storage issues, you should create a conda environment on the scratch storage and link to them in your home directory. <pre><code>mkdir -p /scratch/${USER}/.conda\nln -s /scratch/${USER}/.conda $HOME/.conda\n</code></pre> On similar lines, you can also create a cache and local folders on the scratch storage and link to them in your home directory. This may also help you avoid storage issues related to <code>pip</code>. <pre><code>mkdir -p /scratch/${USER}/.cache\nln -s /scratch/${USER}/.cache $HOME/.cache\nmkdir -p /scratch/${USER}/.local\nln -s /scratch/${USER}/.local $HOME/.local\n</code></pre></p>"},{"location":"linux/delftblue/#running-jobs-on-gpu-nodes","title":"Running jobs on GPU nodes","text":""},{"location":"linux/delftblue/#sample-sbatch-script-from-actual-project","title":"Sample sbatch script from actual project","text":"<pre><code>#!/bin/sh\n# You can control the resources and scheduling with '#SBATCH' settings\n# (see 'man sbatch' for more information on setting these parameters)\n#SBATCH --job-name=\"CasMVS\"                 # project name\n#SBATCH --partition=gpu                     # partition name it means i want to use gpu\n#SBATCH --time=02:00:00                     # time limit (HH:MM:SS)\n#SBATCH --ntasks=1                          # number of parallel tasks per job is 1\n#SBATCH --cpus-per-task=24                  # number of cores per task    \n#SBATCH --gpus-per-task=1                   # number of GPUs per task\n#SBATCH --mem-per-cpu=1G                    # memory per CPU core\n#SBATCH --account=research-abe-ur           # account name\n# Measure GPU usage of your job (initialization)\nprevious=$(nvidia-smi --query-accounted-apps='gpu_utilization,mem_utilization,max_memory_usage,time' --format='csv' | /usr/bin/tail -n '+2')\n# Use this simple command to check that your sbatch settings are working (it should show the GPU that you requested)\nnvidia-smi\n\n# Your job commands go below here\n#module load 2022r2\n#module load cuda/11.6\nsrun python train.py    --dataset_name dtu    --root_dir /scratch/&lt;netid&gt;/DTU/dtu/    --num_epochs 16 --batch_size 2    --depth_interval 2.65 --n_depths 8 32 48 --interval_ratios 1.0 2.0 4.0    --optimizer adam --lr 1e-3 --lr_scheduler cosine    --exp_name dtu_cas_group_8 --num_groups 8 --num_gpus 1 &gt; test.log\n\n# Your job commands go above here\n# Measure GPU usage of your job (result)\nnvidia-smi --query-accounted-apps='gpu_utilization,mem_utilization,max_memory_usage,time' --format='csv' | /usr/bin/grep -v -F \"$previous\"\n</code></pre>"},{"location":"linux/delftblue/#contribute","title":"Contribute","text":"<p>If you find any errors or have any suggestions, please feel free to open an issue or pull request in git.</p>"},{"location":"linux/delftblue/#kudos","title":"Kudos","text":"<ul> <li>Zexin Yang for INSY tutorial</li> <li>SLURM documentation</li> <li>DelftBlue documentation</li> <li>INSY documentation</li> </ul>"},{"location":"linux/ssh/","title":"Connecting to a Linux server with ssh","text":"<p>Due to security measures, you cannot connect directly with your password. Here is how to set this up on a UNIX-like system (<code>Linux</code> and <code>macOS</code>).</p>"},{"location":"linux/ssh/#configuration","title":"Configuration","text":"<ol> <li> <p>In your local computer, type <code>ssh-keygen -t ed25519</code> and follow the instructions. It is recommended to use a password to protect your keys. You'll have to use this password everytime you login after you are done, or you can use <code>ssh-add</code> to store it (once after you restart your computer).</p> </li> <li> <p>Create a file named <code>config</code> in your <code>~/.ssh</code> folder (or, just <code>vim ~/.ssh/config</code>) and put the following content:</p> <pre><code>Host bastionex\n  Hostname linux-bastion-ex.tudelft.nl\n  User netid\n\nHost godzilla\n  Hostname godzilla.bk.tudelft.nl\n  ProxyCommand ssh -W %h:%p bastionex\n  User gUsername\n\nHost website\n  Hostname 3d.bk.tudelft.nl\n  ProxyCommand ssh -W %h:%p bastionex\n  User wUsername\n</code></pre> <p>Replace <code>netid</code> with your netid, <code>gUsername</code> with your username in godzilla and <code>wUsername</code> with your username in the website server.</p> </li> <li> <p>Copy your public key (as created in step 1) to all three servers respectively. So:</p> <ul> <li><code>ssh-copy-id bastionex</code> and give your TU Delft password when prompted.</li> <li><code>ssh-copy-id godzilla</code> and give your keys password (set in step 1) and then your godzilla password.</li> <li><code>ssh-copy-id website</code> and your keys password (set in step 1) and then your website password.</li> </ul> <p>Beware you might be prompted for the password of your ssh keys multiple times before you are asked for the actual password of the respective user in each server.</p> </li> </ol>"},{"location":"linux/ssh/#usage","title":"Usage","text":"<p>As soon as your <code>~/.ssh/config</code> is defined and your public key is copied correctly, you should be able to login to godzilla or the website with the respective commands: - <code>ssh godzilla</code> - <code>ssh website</code></p>"},{"location":"linux/ssh/#transferring-files","title":"Transferring files","text":"<p>We suggest you use <code>rsync</code> command in the terminal for file transfer. To transfer a whole directory to a remote machine, use the following syntax:</p> <pre><code>rsync -azhP foo/bar remote_host:/folder/in/remote/\n</code></pre> <p>To transfer contents of a directory, but not the directory itself, add a trailing slash <code>/</code>. For example, to transfer the contents of a directory to 'gilfoyle', you can type</p> <pre><code>rsync -azhP foo/bar/ gilfoyle:/home/myusername/\n</code></pre> <p>To transfer a whole directory from a remote to your current directory, type:</p> <pre><code>rsync -azhP remote_host:/folder/in/remote .\n</code></pre> <p>If you don't have a Host defined in .ssh/config file, you must use username@remote_host identifier as 'remote_host'.</p> <p>Few notes about rsync:</p> <ul> <li>It 'synchronizes' files between two computers. This means if two files are the same (name, size, date) it will skip them. Useful when you only want to update the whole folder with new files.</li> <li>In the <code>-azhP</code> options <code>a</code> preserves all information on files from the host, <code>z</code> compresses files before sending, <code>h</code> shows human-readable form, and <code>P</code> allows a continuation of partially transferred files (in case your connection breaks).</li> </ul>"},{"location":"linux/ssh/#comments","title":"Comments","text":"<ul> <li>For students, bastionex is not accesible. They have to request for an account in student-linux.tudelft.nl and then the configuration above should be change to use that hostname instead.</li> <li>On <code>Windows</code> it should be possible to do similar things with <code>puttyssh</code> and <code>puttyagent</code>. Another alternative is to install <code>Windows Subsystem for Linux</code> and some Linux distribution (e.g. <code>Ubuntu</code>) and follow the same instructions above.</li> <li>To copy files using a graphic interface use WinSCP, and configure a session following the figures here:   </li> </ul>"},{"location":"linux/wsl/","title":"WSL (Windows Subsystem for Linux)","text":""},{"location":"linux/wsl/#what-is-wsl","title":"What is WSL?","text":"<p>WSL is an installation of a Linux environment \"inside\" your Windows (Win10 or Win11). It will allow you to run several Linux tools on the command line (eg <code>wget</code>, <code>grep</code>, or <code>ssh</code>), to use databases (eg Postgres) or compilers (eg C++) installed under Linux.</p>"},{"location":"linux/wsl/#how-to-install-wsl","title":"How to install WSL","text":"<p>To install WSL, open command prompt as administrator. </p> <p></p> <p>Run the following command:</p> <pre><code>wsl --install -d ubuntu\n</code></pre> <p>This will start the process to install WSL on your device. Once the installation is complete, you will need to reboot your device.   </p> <p>After the reboot, wait a couple of seconds for the Ubuntu terminal to open and complete the installation. It will then ask you to specify a username and password. </p> <p></p> <p>Once you complete this step, your WSL is ready to use! </p> <p>Note</p> <p>You will not be able to use \"ctrl+c/v\" for Copy/Paste on the Ubuntu terminal. Instead, go to Properties by right-clicking on the top of the terminal and enable Use Ctrl+Shift+C/V as Copy/Paste.</p> <p></p> <p>Warning</p> <p>Some computer companies seem to block virtualization by default, and it needs to be explictly enabled. This is done in the BIOS, follow this manual.</p> <p>Warning</p> <p>Some Windows installations come with either virtualisation features or WSL disabled. See this post to enable them.</p> <p>Warning</p> <p>If you want to install another Linux than Ubuntu (as above) or want to see more options, see the Microsoft Basic commands for WSL.</p>"},{"location":"linux/wsl/#the-windows-terminal-is-recommended","title":"The Windows Terminal is recommended","text":"<p>We recommend you install and use the Windows Terminal instead of the Command Prompt, it's more powerful and flexible.</p>"},{"location":"python/venv/","title":"Virtual environments (venv)","text":"<p>A Python virtual environment (venv) is \"created on top of an existing Python installation [...] and may optionally be isolated from the packages in the base environment\". Each venv will have its own set of Python packages, indepedent from the the main Python installation.</p> <p>It allows us to avoid this (from xkcd-1987):</p> <p></p>"},{"location":"python/venv/#how-to-create-and-use-a-venv","title":"How to create and use a venv","text":"<p>Nothing needs to be installed, venv are builtin Python.</p> <p>In the folder where you have some code, you can create a new venv:</p> <pre><code>python -m venv ./myenv\n</code></pre> <p>For Windows, replace <code>./myenv</code> by the path where you want the venv.</p> <p>Then the venv needs to be activated, how to do this depends on your OS and used console:</p> <p></p> <p>If you're still in the folder above, with macOS I need to:</p> <pre><code>source ./myvenv/bin/activate\n</code></pre> <p></p> <p>The new venv you created is empty, that is it should only have 2 packages as shown in the console above. You can install new packages with <code>pip install numpy</code> and those will be added in the venv. As long as you see the name of your venv between brackets (<code>(myenv)</code>) it means that you are using the venv.</p> <p>To stop using this venv:</p> <pre><code>deactivate\n</code></pre>"},{"location":"python/venv/#how-to-create-a-venv-with-pycharm","title":"How to create a venv with PyCharm","text":""},{"location":"python/venv/#a-venv-manager-pyenv","title":"A venv manager: pyenv","text":"<p>Creating local folders in each different project is simple, but at some points you might forget what you've done and Python venv doesn't give you an overview.</p> <p>We suggest to use pyenv (for macOS/Linux; for Windows use pyenv-win), which is a rather simple and very useful managers for virtual environments. It lets your switch between venv, and you get an overview of the ones you have created (they are globally defined).</p> <p>For macOS, to install pyenv: <code>brew install pyenv</code> (you need to have Homebrew installed).</p> <p>Some useful commands:</p> <ul> <li>install a specific version of Python: <code>pyenv install 3.10.4</code></li> <li>make it global: <code>pyenv global 3.10.4</code></li> <li>create a new venv (based on the current global version): <code>penv virtualenv myenv1</code></li> <li>activate it: <code>penv activate myenv1</code></li> <li>deactivate it: <code>pyenv deactivate</code></li> </ul>"},{"location":"writing/latexintro/","title":"Intro to LaTeX","text":""},{"location":"writing/latexintro/#latex-installation","title":"LaTeX installation","text":""},{"location":"writing/latexintro/#online-environment-overleaf","title":"Online environment: Overleaf","text":"<p>To start, we recommend you use the online LaTeX environment Overleaf since it has a full installation of LaTeX and there is nothing to install. If you login with your TUDelft email, you get extra features (TUDelft pays for it).</p>"},{"location":"writing/latexintro/#local-installation","title":"Local installation","text":"<p>If you want to use LaTeX locally (it's faster to compile) then you need either:</p> <ul> <li>MiKTeX (Windows) </li> <li>MacTeX (macOS). </li> <li>TeXLive (Linux)</li> </ul> <p>Warning</p> <p>For small documents Overleaf is great. But it becomes rather slow for medium to large documents, and then using LaTeX locally is probably a better idea.</p>"},{"location":"writing/latexintro/#getting-started","title":"Getting started","text":"<p>The best is to follow the Overleaf's Learn LaTeX in 30min to start.</p> <p>The only crucial thing missing from it is how to add references, for this we suggest you use \"natbib\" (tutorial about bibliography management with natbib).</p>"},{"location":"writing/latexintro/#tips-and-tricks-for-latex","title":"Tips and tricks for LaTeX","text":"<p> this simple demo gives you tips and tricks to do most of the useful things in LaTeX.</p> <p>Use it as the template for submitting your homeworks for instance.</p> <p>Info</p> <p>LaTeX is great but there are often 37 ways to accomplish something... The template we give you shows you what we think is \"the best to do X\"</p>"},{"location":"writing/latexintro/#which-software-to-use","title":"Which software to use?","text":""},{"location":"writing/latexintro/#editors-if-you-dont-use-overleaf","title":"Editors (if you don't use Overleaf)","text":"<ul> <li>TeXnicCenter (Windows)</li> <li>TeXStudio (cross-platform)</li> <li>TeXshop (macOS; which is bundled with MacTeX)</li> <li>Visual Studio Code as generic editor with the LaTeX Workshop plugin</li> <li>Texmaker (cross-platform)</li> <li>Sublime Text (cross-platform; TeX support can be added through package control with the LaTeXTools package; also with package control you can get a nice linter called SublimeLinter with TeX support through SublimeLinter-chktex)</li> </ul>"},{"location":"writing/latexintro/#managing-references","title":"Managing references","text":"<ul> <li>JabRef (cross-platform)</li> <li>Zotero (cross-platform; integrations for Office and browsers; use a plugin like better bibtex)</li> <li>Mendeley (cross-platform; integrations for Office and browsers; integrates with Overleaf professional accounts)</li> <li>BibDesk (macOS)</li> </ul>"},{"location":"writing/latexintro/#drawing-figures","title":"Drawing figures","text":"<ul> <li>Adobe Illustrator (nice, but \u20ac\u20ac\u20ac)</li> <li>Affinity Designer (macOS, iPadOS and Windows; \u20ac\u20ac but way less than Adobe)</li> <li>Inkscape (cross-platform)</li> <li>IPE (cross-platform; integrates LaTeX text; great for triangulation and geometric stuff)</li> </ul>"},{"location":"writing/latexintro/#drawing-flowcharts","title":"Drawing flowcharts","text":"<ul> <li>MathCha</li> <li>draw.io</li> <li>OmniGraffle (macOS and iOS; nice, but \u20ac\u20ac\u20ac)</li> </ul>"},{"location":"writing/latexintro/#equation-writers","title":"Equation writers","text":"<ul> <li>Grapher (macOS Utilities) Graphical interface to write equations that offers the option to copy them as LaTeX expression</li> <li>LaTeXiT (macOS) utility to write equations in LaTeX and export them for use in other software</li> <li>Mathpix Snip (cross-platform) many cool things with equations</li> </ul>"},{"location":"writing/latexintro/#help-to-make-tables","title":"Help to make tables","text":"<ul> <li>Tables Generator (LaTeX tables are tough to type and align, this helps greatly to start)# latex-getting-started Quick LaTeX course</li> </ul>"},{"location":"writing/latextogether/","title":"Writing LaTeX with other people","text":"<p>Note</p> <p>This is taken from The Rules for happily collaborating on a LaTeX document\u00a9</p> <p>The 10 rules you should follow if you're writing a LaTeX documents with other people.</p>"},{"location":"writing/latextogether/#1-you-shall-use-only-one-sentence-per-line","title":"1. You shall use only one sentence per line","text":"<p>And use one empty line to start a new paragraph. It'll then be easier to track changes in Git, since these are line-based.</p> <pre><code>I like to create buffers in ArcGIS.\nBut it is not always possible as it often crashes.\n\nAlso, ...\n</code></pre>"},{"location":"writing/latextogether/#2-you-shall-use-natbib-for-citations","title":"2. You shall use natbib for citations","text":"<p>and the commands <code>\\citet{}</code> (cite in the text as a noun) <code>\\citep{}</code> (cite between parentheses). </p> <pre><code>\\usepackage[round]{natbib}\n...\n\\citet{Smith00} succeeded in creating a buffer.\nHowever, it has been shown that it is not an easy task~\\citep{Brown90}.\n</code></pre>"},{"location":"writing/latextogether/#3-you-shall-prevent-breaking-lines-with-when-referencing-and-citing","title":"3. You shall prevent breaking lines with \"~\" when referencing and citing","text":"<pre><code>In Section~\\ref{sec:intro}, we can observe that the buffer was a success~\\citep{Smith99}.\n</code></pre>"},{"location":"writing/latextogether/#4-you-shall-use-one-for-an-hyphen-two-for-a-range-between-numbers-and-three-for-a-punctuation-in-a-sentence","title":"4. You shall use one <code>-</code> for an hyphen, two <code>--</code> for a range between numbers, and three <code>---</code> for a punctuation in a sentence","text":"<pre><code>I like---unlike my father---to build multi-dimensional models, \nespecially those made in 1990--1995.\n</code></pre>"},{"location":"writing/latextogether/#5-you-shall-give-meaningful-labels","title":"5. You shall give meaningful labels","text":"<p>A figure's label should start with <code>fig:</code> and a section's label with <code>sec:</code></p> <pre><code>\\section{Introduction}  \n\\label{sec:intro}\nIn recent years, buffers have been rather complex to implement because ...\n</code></pre>"},{"location":"writing/latextogether/#6-you-shall-put-a-short-space-after-eg-and-ie-with-the-use-of-a-backslash","title":"6. You shall put a short space after e.g. and i.e. with the use of a backslash","text":"<p>The following two commands shall thus be used:</p> <pre><code>\\newcommand{\\ie}{i.e.}\n\\newcommand{\\eg}{e.g.}\n...\nBuffers can be generated on different geometries, \\eg\\ points, polylines and polygons.\n</code></pre>"},{"location":"writing/latextogether/#7-you-shall-put-all-figuresgraphs-in-a-single-subfolder-figs","title":"7. You shall put all figures/graphs in a single subfolder (<code>figs/</code>)","text":"<p>And you shall put the source file (eg IPE, OmniGraffle, Illustrator, etc.) there as well for future use.</p> <p>You can then use this to specify the relative path for all figures (it refers to the figure <code>./figs/potato.pdf</code>):</p> <pre><code>\\graphicspath{{figs/}}\n\\includegraphics[width=0.95\\linewidth]{potato.pdf}\n</code></pre>"},{"location":"writing/latextogether/#8-in-your-bibtex-file-you-shall-use-curly-brackets-for-wordsletters-you-want-to-have-capitalised-in-the-title","title":"8. In your BibTeX file, you shall use curly brackets for words/letters you want to have capitalised in the title","text":"<p>The other fields are not affected by this. LaTeX does this to uniformise the capitalisation in all citations.</p> <pre><code>@article{Smith00,\n  Author = {Smith, John},\n  Journal = {The GIS Journal},\n  Title = {The {3D} {CityGML} building was constructed with the {Delaunay} triangulation},\n  Year = {2001},\n  ...\n}\n</code></pre>"},{"location":"writing/latextogether/#9-you-shall-not-add-any-commands-to-change-the-format-until-the-the-paper-is-finished","title":"9. You shall not add any commands to change the format until the the paper is finished","text":"<p><code>\\vspace</code> and <code>\\newpage</code> are thus forbidden.</p>"},{"location":"writing/latextogether/#10-you-shall-declare-all-sizes-relative-to-linewidth","title":"10. You shall declare all sizes relative to <code>\\linewidth</code>.","text":"<p>So that the paper can be switched to a 2-column one without (too much) pain.</p> <pre><code>\\includegraphics[width=0.95\\linewidth]{potato.pdf}\n</code></pre>"},{"location":"%F0%9F%8F%86/","title":"The best software","text":"<p>This is where it's getting fun, a totally non-objective list of what we find \"best\" to perform daily tasks with computers.</p> Staff OS Text editor Git client C++ IDE Python IDE LaTeX Reference manager Hugo macOS Sublime Text Sublime Merge CLion Sublime Text Sublime Text + LaTeXTools Jabref Ivan macOS / Linux Vim Terminal CLion PyCharm Texmaker Mendeley Maarten macOS / Linux Visual Studio Code git / Sublime Merge Visual Studio Code Visual Studio Code Visual Studio Code + Latex Workshop Zotero"}]}